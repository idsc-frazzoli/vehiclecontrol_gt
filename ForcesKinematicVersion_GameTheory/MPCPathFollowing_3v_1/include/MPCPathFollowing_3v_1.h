/*
MPCPathFollowing_3v_1 : A fast customized optimization solver.

Copyright (C) 2013-2020 EMBOTECH AG [info@embotech.com]. All rights reserved.


This software is intended for simulation and testing purposes only. 
Use of this software for any commercial purpose is prohibited.

This program is distributed in the hope that it will be useful.
EMBOTECH makes NO WARRANTIES with respect to the use of the software 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. 

EMBOTECH shall not have any liability for any damage arising from the use
of the software.

This Agreement shall exclusively be governed by and interpreted in 
accordance with the laws of Switzerland, excluding its principles
of conflict of laws. The Courts of Zurich-City shall have exclusive 
jurisdiction in case of any dispute.

*/

/* Generated by FORCES PRO v4.1.1 on Wednesday, January 13, 2021 at 2:04:54 PM */

#ifndef SOLVER_STDIO_H
#define SOLVER_STDIO_H
#include <stdio.h>
#endif

#ifndef MPCPathFollowing_3v_1_H
#define MPCPathFollowing_3v_1_H

#ifndef SOLVER_STANDARD_TYPES
#define SOLVER_STANDARD_TYPES

typedef signed char solver_int8_signed;
typedef unsigned char solver_int8_unsigned;
typedef char solver_int8_default;
typedef signed short int solver_int16_signed;
typedef unsigned short int solver_int16_unsigned;
typedef short int solver_int16_default;
typedef signed int solver_int32_signed;
typedef unsigned int solver_int32_unsigned;
typedef int solver_int32_default;
typedef signed long long int solver_int64_signed;
typedef unsigned long long int solver_int64_unsigned;
typedef long long int solver_int64_default;

#endif


/* DATA TYPE ------------------------------------------------------------*/
typedef double MPCPathFollowing_3v_1_float;

typedef double MPCPathFollowing_3v_1interface_float;

/* SOLVER SETTINGS ------------------------------------------------------*/

/* MISRA-C compliance */
#ifndef MISRA_C_MPCPathFollowing_3v_1
#define MISRA_C_MPCPathFollowing_3v_1 (0)
#endif

/* restrict code */
#ifndef RESTRICT_CODE_MPCPathFollowing_3v_1
#define RESTRICT_CODE_MPCPathFollowing_3v_1 (0)
#endif

/* print level */
#ifndef SET_PRINTLEVEL_MPCPathFollowing_3v_1
#define SET_PRINTLEVEL_MPCPathFollowing_3v_1    (1)
#endif

/* timing */
#ifndef SET_TIMING_MPCPathFollowing_3v_1
#define SET_TIMING_MPCPathFollowing_3v_1    (1)
#endif

/* Numeric Warnings */
/* #define PRINTNUMERICALWARNINGS */

/* maximum number of iterations  */
#define SET_MAXIT_MPCPathFollowing_3v_1			(1000)	

/* scaling factor of line search (FTB rule) */
#define SET_FLS_SCALE_MPCPathFollowing_3v_1		(MPCPathFollowing_3v_1_float)(0.99)      

/* maximum number of supported elements in the filter */
#define MAX_FILTER_SIZE_MPCPathFollowing_3v_1	(1000) 

/* maximum number of supported elements in the filter */
#define MAX_SOC_IT_MPCPathFollowing_3v_1			(4) 

/* desired relative duality gap */
#define SET_ACC_RDGAP_MPCPathFollowing_3v_1		(MPCPathFollowing_3v_1_float)(0.0001)

/* desired maximum residual on equality constraints */
#define SET_ACC_RESEQ_MPCPathFollowing_3v_1		(MPCPathFollowing_3v_1_float)(1E-06)

/* desired maximum residual on inequality constraints */
#define SET_ACC_RESINEQ_MPCPathFollowing_3v_1	(MPCPathFollowing_3v_1_float)(1E-06)

/* desired maximum violation of complementarity */
#define SET_ACC_KKTCOMPL_MPCPathFollowing_3v_1	(MPCPathFollowing_3v_1_float)(1E-06)


/* SOLVER RETURN CODES----------------------------------------------------------*/
/* solver has converged within desired accuracy */
#define OPTIMAL_MPCPathFollowing_3v_1      (1)

/* maximum number of iterations has been reached */
#define MAXITREACHED_MPCPathFollowing_3v_1 (0)

/* solver has stopped due to a timeout */
#define TIMEOUT_MPCPathFollowing_3v_1   (2)

/* wrong number of inequalities error */
#define INVALID_NUM_INEQ_ERROR_MPCPathFollowing_3v_1  (-4)

/* factorization error */
#define FACTORIZATION_ERROR_MPCPathFollowing_3v_1   (-5)

/* NaN encountered in function evaluations */
#define BADFUNCEVAL_MPCPathFollowing_3v_1  (-6)

/* no progress in method possible */
#define NOPROGRESS_MPCPathFollowing_3v_1   (-7)

/* invalid values in parameters */
#define PARAM_VALUE_ERROR_MPCPathFollowing_3v_1   (-11)

/* too small timeout given */
#define INVALID_TIMEOUT_MPCPathFollowing_3v_1   (-12)

/* licensing error - solver not valid on this machine */
#define LICENSE_ERROR_MPCPathFollowing_3v_1  (-100)

/* INTEGRATORS RETURN CODE ------------*/
/* Integrator ran successfully */
#define INTEGRATOR_SUCCESS (11)
/* Number of steps set by user exceeds maximum number of steps allowed */
#define INTEGRATOR_MAXSTEPS_EXCEEDED (12)



/* PARAMETERS -----------------------------------------------------------*/
/* fill this with data before calling the solver! */
typedef struct
{
    /* vector of size 1980 */
    MPCPathFollowing_3v_1_float x0[1980];

    /* vector of size 21 */
    MPCPathFollowing_3v_1_float xinit[21];

    /* vector of size 8520 */
    MPCPathFollowing_3v_1_float all_parameters[8520];


} MPCPathFollowing_3v_1_params;


/* OUTPUTS --------------------------------------------------------------*/
/* the desired variables are put here by the solver */
typedef struct
{
    /* vector of size 1980 */
    MPCPathFollowing_3v_1_float alldata[1980];


} MPCPathFollowing_3v_1_output;


/* SOLVER INFO ----------------------------------------------------------*/
/* diagnostic data from last interior point step */
typedef struct
{
    /* iteration number */
    solver_int32_default it;

	/* number of iterations needed to optimality (branch-and-bound) */
	solver_int32_default it2opt;
	
    /* inf-norm of equality constraint residuals */
    MPCPathFollowing_3v_1_float res_eq;
	
    /* inf-norm of inequality constraint residuals */
    MPCPathFollowing_3v_1_float res_ineq;

	/* norm of stationarity condition */
    MPCPathFollowing_3v_1_float rsnorm;

	/* max of all complementarity violations */
    MPCPathFollowing_3v_1_float rcompnorm;

    /* primal objective */
    MPCPathFollowing_3v_1_float pobj;	
	
    /* dual objective */
    MPCPathFollowing_3v_1_float dobj;	

    /* duality gap := pobj - dobj */
    MPCPathFollowing_3v_1_float dgap;		
	
    /* relative duality gap := |dgap / pobj | */
    MPCPathFollowing_3v_1_float rdgap;		

    /* duality measure */
    MPCPathFollowing_3v_1_float mu;

	/* duality measure (after affine step) */
    MPCPathFollowing_3v_1_float mu_aff;
	
    /* centering parameter */
    MPCPathFollowing_3v_1_float sigma;
	
    /* number of backtracking line search steps (affine direction) */
    solver_int32_default lsit_aff;
    
    /* number of backtracking line search steps (combined direction) */
    solver_int32_default lsit_cc;
    
    /* step size (affine direction) */
    MPCPathFollowing_3v_1_float step_aff;
    
    /* step size (combined direction) */
    MPCPathFollowing_3v_1_float step_cc;    

	/* solvertime */
	MPCPathFollowing_3v_1_float solvetime;   

	/* time spent in function evaluations */
	MPCPathFollowing_3v_1_float fevalstime;  


} MPCPathFollowing_3v_1_info;







/* SOLVER FUNCTION DEFINITION -------------------------------------------*/
/* Time of Solver Generation: (UTC) Wednesday, January 13, 2021 2:04:58 PM */
/* User License expires on: (UTC) Monday, February 15, 2021 10:00:00 PM (approx.) (at the time of code generation) */
/* Solver Static License expires on: (UTC) Monday, February 15, 2021 10:00:00 PM (approx.) */
/* Solver Generation Request Id: e4edda56-6947-4966-a4c1-241cec1c0bb3 */
/* examine exitflag before using the result! */
#ifdef __cplusplus
extern "C" {
#endif		

typedef void (*MPCPathFollowing_3v_1_extfunc)(MPCPathFollowing_3v_1_float* x, MPCPathFollowing_3v_1_float* y, MPCPathFollowing_3v_1_float* lambda, MPCPathFollowing_3v_1_float* params, MPCPathFollowing_3v_1_float* pobj, MPCPathFollowing_3v_1_float* g, MPCPathFollowing_3v_1_float* c, MPCPathFollowing_3v_1_float* Jeq, MPCPathFollowing_3v_1_float* h, MPCPathFollowing_3v_1_float* Jineq, MPCPathFollowing_3v_1_float* H, solver_int32_default stage, solver_int32_default iterations, solver_int32_default threadID);

extern solver_int32_default MPCPathFollowing_3v_1_solve(MPCPathFollowing_3v_1_params *params, MPCPathFollowing_3v_1_output *output, MPCPathFollowing_3v_1_info *info, FILE *fs, MPCPathFollowing_3v_1_extfunc evalextfunctions_MPCPathFollowing_3v_1);	







#ifdef __cplusplus
}
#endif

#endif
